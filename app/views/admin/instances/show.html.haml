- content_for :page_title do
  = @instance.domain

- content_for :heading do
  %h2= t('admin.instances.instance.title', domain: @instance.domain)
  = render partial: 'admin/instances/shared/links', locals: { instance: @instance }

- if current_user.can?(:view_dashboard)
  - content_for :heading_actions do
    = date_range(@time_period)

  - if @instance.persisted?
    = render 'admin/instances/dashboard', instance_domain: @instance.domain, period_end_at: @time_period.last, period_start_at: @time_period.first
  - else
    %p
      = t('admin.instances.unknown_instance')

%hr.spacer/

%h3= t('admin.instances.federation_policies.title')

- if limited_federation_mode?
  %p= t('admin.instances.federation_policies.limited_federation_mode_description_html')

  - if @instance.domain_allow
    = link_to t('admin.domain_allows.undo'), admin_domain_allow_path(@instance.domain_allow), class: 'button button--destructive', data: { confirm: t('admin.accounts.are_you_sure'), method: :delete }
  - else
    = link_to t('admin.domain_allows.add_new'), admin_domain_allows_path(domain_allow: { domain: @instance.domain }), class: 'button', method: :post
- else
  %p= t('admin.instances.federation_policies.description_html')

  - if @instance.domain_block
    .table-wrapper
      %table.table.horizontal-table
        %thead
          %tr
            %th{ width: '28%' }
            %th
        %tbody
          %tr
            %th= t('admin.instances.federation_policies.comment')
            %td
              - if @instance.domain_block.private_comment.present?
                = @instance.domain_block.private_comment
              - else
                %em= t('admin.instances.federation_policies.no_comment')
          %tr
            %th= t('admin.instances.federation_policies.reason')
            %td
              - if @instance.domain_block.public_comment.present?
                = @instance.domain_block.public_comment
              - else
                %em= t('admin.instances.federation_policies.no_comment')
          %tr
            %th= t('admin.instances.federation_policies.policy')
            %td= @instance.domain_block.policies.map { |policy| t(policy, scope: 'admin.instances.federation_policies.policies') }.join(' Â· ')

    .button-group
      = link_to t('admin.domain_blocks.edit'), edit_admin_domain_block_path(@instance.domain_block), class: 'button'
      = link_to t('admin.domain_blocks.undo'), admin_domain_block_path(@instance.domain_block), class: 'button button-secondary', data: { confirm: t('admin.accounts.are_you_sure'), method: :delete }
      - if @instance.purgeable?
        = link_to t('admin.instances.federation_policies.purge_data'), admin_instance_path(@instance), data: { confirm: t('admin.instances.confirm_purge'), method: :delete }, class: 'button button-tertiary button--destructive button-group__button--end'
  - else
    = link_to t('admin.domain_blocks.add_new'), new_admin_domain_block_path(_domain: @instance.domain), class: 'button'

- if @instance.persisted?
  %hr.spacer/

  %h3= t('admin.instances.audit_log.title')
  %p= t('admin.instances.audit_log.description')
  - if @action_logs.empty?
    %p= t('accounts.nothing_here')
  - else
    .report-notes
      = render partial: 'admin/action_logs/action_log', collection: @action_logs
    = link_to t('admin.instances.audit_log.view_all'), admin_action_logs_path(target_domain: @instance.domain), class: 'button button-secondary'

%hr.spacer/

- if @instance.domain.present?
  %h3#instance-notes= t('admin.instances.moderation_notes.title')
  %p= t('admin.instances.moderation_notes.description_html')
  .report-notes
    = render partial: 'admin/report_notes/report_note', collection: @instance_moderation_notes

  = simple_form_for @instance_moderation_note, url: admin_instance_moderation_notes_path(instance_id: @instance.domain) do |form|
    = render 'shared/error_messages', object: @instance_moderation_note

    .field-group
      = form.input :content, input_html: { placeholder: t('admin.instances.moderation_notes.placeholder'), maxlength: InstanceModerationNote::CONTENT_SIZE_LIMIT, rows: 6, autofocus: @instance_moderation_note.errors.any? }

    .actions
      = form.button :button, t('admin.instances.moderation_notes.create'), type: :submit
