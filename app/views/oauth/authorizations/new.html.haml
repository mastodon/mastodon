- content_for :page_title do
  = t('doorkeeper.authorizations.new.title')

.form-container.simple_form
  .oauth-prompt
    %h3= t('doorkeeper.authorizations.new.title')

    %p= t('doorkeeper.authorizations.new.prompt_html', client_name: content_tag(:strong, @pre_auth.client.name))

    %h3= t('doorkeeper.authorizations.new.review_permissions')

    %ul.permissions-list
      - grouped_scopes(@pre_auth.scopes).each do |scope|
        %li.permissions-list__item
          .permissions-list__item__icon
            = material_symbol('check')
          .permissions-list__item__text
            .permissions-list__item__text__title
              = t(scope.key, scope: [:doorkeeper, :grouped_scopes, :title])
            .permissions-list__item__text__type
              = t(scope.access, scope: [:doorkeeper, :grouped_scopes, :access])

    .actions
      = form_with url: oauth_authorization_path do |form|
        = form.hidden_field :client_id,
                            value: @pre_auth.client.uid
        = form.hidden_field :redirect_uri,
                            value: @pre_auth.redirect_uri
        = form.hidden_field :code_challenge, value: @pre_auth.code_challenge
        = form.hidden_field :code_challenge_method, value: @pre_auth.code_challenge_method
        = form.hidden_field :state,
                            value: @pre_auth.state
        = form.hidden_field :response_type,
                            value: @pre_auth.response_type
        = form.hidden_field :scope,
                            value: @pre_auth.scope
        = form.button t('doorkeeper.authorizations.buttons.authorize'),
                      type: :submit

      = form_with url: oauth_authorization_path, method: :delete do |form|
        = form.hidden_field :client_id,
                            value: @pre_auth.client.uid
        = form.hidden_field :redirect_uri,
                            value: @pre_auth.redirect_uri
        = form.hidden_field :code_challenge, value: @pre_auth.code_challenge
        = form.hidden_field :code_challenge_method, value: @pre_auth.code_challenge_method
        = form.hidden_field :state,
                            value: @pre_auth.state
        = form.hidden_field :response_type,
                            value: @pre_auth.response_type
        = form.hidden_field :scope,
                            value: @pre_auth.scope
        = form.button t('doorkeeper.authorizations.buttons.deny'),
                      type: :submit,
                      class: 'negative'
